/* Class Name   : LXFO_RallyUserStoryJSONStubClass 
* Description   : This is a stub class for JSON response received from Rally
* Created By   : Sanjay George
* Created Date : 03-23-2013
* Modification Log:  
* --------------------------------------------------------------------------------------------------------------------------------------
* Developer                Date                 Modification ID        Description 
* ---------------------------------------------------------------------------------------------------------------------------------------
* Sanjay George          03-26-2013                1000                Generated by JSON2Apex http://json2apex.herokuapp.com/

*/

public class LXFO_RallyUserStoryJSONStubClass {
    public static void consumeObject(JSONParser parser) {
        Integer depth = 0;
        do {
            JSONToken curr = parser.getCurrentToken();
            if (curr == JSONToken.START_OBJECT || 
                curr == JSONToken.START_ARRAY) {
                depth++;
            } else if (curr == JSONToken.END_OBJECT ||
                curr == JSONToken.END_ARRAY) {
                depth--;
            }
        } while (depth > 0 && parser.nextToken() != null);
    }

    public class QueryResult {
        public String rallyAPIMajor {get;set;}
        public String rallyAPIMinor {get;set;}
        public List<Errors> Errors {get;set;}
        public List<String> Warnings {get;set;}
        public Integer TotalResultCount {get;set;}
        public Integer StartIndex {get;set;}
        public Integer PageSize {get;set;}
        public List<Results> Results {get;set;}

        public QueryResult(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == '_rallyAPIMajor') {
                            rallyAPIMajor = parser.getText();
                        } else if (text == '_rallyAPIMinor') {
                            rallyAPIMinor = parser.getText();
                        } else if (text == 'Errors') {
                            Errors = new List<Errors>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                Errors.add(new Errors(parser));
                            }
                        } else if (text == 'Warnings') {
                            Warnings = new List<String>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                Warnings.add(parser.getText());
                            }
                        } else if (text == 'TotalResultCount') {
                            TotalResultCount = parser.getIntegerValue();
                        } else if (text == 'StartIndex') {
                            StartIndex = parser.getIntegerValue();
                        } else if (text == 'PageSize') {
                            PageSize = parser.getIntegerValue();
                        } else if (text == 'Results') {
                            Results = new List<Results>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                Results.add(new Results(parser));
                            }
                        } else {
                            System.debug(LoggingLevel.WARN, 'QueryResult consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Subscription {
        public String rallyAPIMajor {get;set;}
        public String rallyAPIMinor {get;set;}
        public String ref {get;set;}
        public String refObjectName {get;set;}
        public String type {get;set;}

        public Subscription(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == '_rallyAPIMajor') {
                            rallyAPIMajor = parser.getText();
                        } else if (text == '_rallyAPIMinor') {
                            rallyAPIMinor = parser.getText();
                        } else if (text == '_ref') {
                            ref = parser.getText();
                        } else if (text == '_refObjectName') {
                            refObjectName = parser.getText();
                        } else if (text == '_type') {
                            type = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Subscription consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public QueryResult QueryResult {get;set;}

    public LXFO_RallyUserStoryJSONStubClass(JSONParser parser) {
        while (parser.nextToken() != JSONToken.END_OBJECT) {
            if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                String text = parser.getText();
                if (parser.nextToken() != JSONToken.VALUE_NULL) {
                    if (text == 'QueryResult') {
                        QueryResult = new QueryResult(parser);
                    } else {
                        System.debug(LoggingLevel.WARN, 'Root consuming unrecognized property: '+text);
                        consumeObject(parser);
                    }
                }
            }
        }
    }
    
    public class RevisionHistory {
        public String rallyAPIMajor {get;set;}
        public String rallyAPIMinor {get;set;}
        public String ref {get;set;}
        public String type {get;set;}

        public RevisionHistory(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == '_rallyAPIMajor') {
                            rallyAPIMajor = parser.getText();
                        } else if (text == '_rallyAPIMinor') {
                            rallyAPIMinor = parser.getText();
                        } else if (text == '_ref') {
                            ref = parser.getText();
                        } else if (text == '_type') {
                            type = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'RevisionHistory consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Results {
        public String rallyAPIMajor {get;set;}
        public String rallyAPIMinor {get;set;}
        public String ref {get;set;}
        public String objectVersion {get;set;}
        public String refObjectName {get;set;}
        public String CreationDate {get;set;}
        public String CreatedAt {get;set;}
        public Long ObjectID {get;set;}
        public Subscription Subscription {get;set;}
        public Subscription Workspace {get;set;}
        public List<Errors> Changesets {get;set;}
        public String Description {get;set;}
        public List<Errors> Discussion {get;set;}
        public String FormattedID {get;set;}
        public String LastUpdateDate {get;set;}
        public String Name {get;set;}
        public String Notes {get;set;}
        public Subscription Owner {get;set;}
        public Subscription Project {get;set;}
        public Boolean Ready {get;set;}
        public RevisionHistory RevisionHistory {get;set;}
        public List<Subscription> Tags {get;set;}
        public List<Subscription> Attachments {get;set;}
        public Object Packages {get;set;}
        public Object AcceptedDate {get;set;}
        public Boolean Blocked {get;set;}
        public String BlockedReason {get;set;}
        public RevisionHistory Blocker {get;set;}
        public List<Errors> Children {get;set;}
        public String DefectStatus {get;set;}
        public List<Errors> Defects {get;set;}
        public Integer DirectChildrenCount {get;set;}
        public Boolean HasParent {get;set;}
        public Object InProgressDate {get;set;}
        public Subscription Iteration {get;set;}
        public Subscription Parent {get;set;}
        public Double PlanEstimate {get;set;}
        public List<Errors> Predecessors {get;set;}
        public Double Rank {get;set;}
        public Boolean Recycled {get;set;}
        public Subscription Release {get;set;}
        public String ScheduleState {get;set;}
        public List<Errors> Successors {get;set;}
        public Double TaskActualTotal {get;set;}
        public Double TaskEstimateTotal {get;set;}
        public Double TaskRemainingTotal {get;set;}
        public String TaskStatus {get;set;}
        public List<Errors> Tasks {get;set;}
        public String TestCaseStatus {get;set;}
        public List<Errors> TestCases {get;set;}
        public String AcceptanceCriteria {get;set;}
        public String Area {get;set;}
        public String Capability {get;set;}
        public String CapabilityRank {get;set;}
        public String FunctionalityEvaluation {get;set;}
        public String Integration {get;set;}
        public Object NotUsed {get;set;}
        public String NotUsedCapability {get;set;}
        public String NotUsedCapabilityRank {get;set;}
        public String NotUsedOldID {get;set;}
        public String NotUsedSource {get;set;}
        public String NotUsedSubCapability {get;set;}
        public String OldID {get;set;}
        public Object PortfolioItem {get;set;}
        public String Ranking {get;set;}
        public String Requester {get;set;}
        public String Source {get;set;}
        public String SubCapability {get;set;}
        public String UserGroup {get;set;}
        public String type {get;set;}

        public Results(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == '_rallyAPIMajor') {
                            rallyAPIMajor = parser.getText();
                        } else if (text == '_rallyAPIMinor') {
                            rallyAPIMinor = parser.getText();
                        } else if (text == '_ref') {
                            ref = parser.getText();
                        } else if (text == '_objectVersion') {
                            objectVersion = parser.getText();
                        } else if (text == '_refObjectName') {
                            refObjectName = parser.getText();
                        } else if (text == 'CreationDate') {
                            CreationDate = parser.getText();
                        } else if (text == '_CreatedAt') {
                            CreatedAt = parser.getText();
                        } else if (text == 'ObjectID') {
                            ObjectID = parser.getLongValue();
                        } else if (text == 'Subscription') {
                            Subscription = new Subscription(parser);
                        } else if (text == 'Workspace') {
                            Workspace = new Subscription(parser);
                        } else if (text == 'Changesets') {
                            Changesets = new List<Errors>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                Changesets.add(new Errors(parser));
                            }
                        } else if (text == 'Description') {
                            Description = parser.getText();
                        } else if (text == 'Discussion') {
                            Discussion = new List<Errors>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                Discussion.add(new Errors(parser));
                            }
                        } else if (text == 'FormattedID') {
                            FormattedID = parser.getText();
                        } else if (text == 'LastUpdateDate') {
                            LastUpdateDate = parser.getText();
                        } else if (text == 'Name') {
                            Name = parser.getText();
                        } else if (text == 'Notes') {
                            Notes = parser.getText();
                        } else if (text == 'Owner') {
                            Owner = new Subscription(parser);
                        } else if (text == 'Project') {
                            Project = new Subscription(parser);
                        } else if (text == 'Ready') {
                            Ready = parser.getBooleanValue();
                        } else if (text == 'RevisionHistory') {
                            RevisionHistory = new RevisionHistory(parser);
                        } else if (text == 'Tags') {
                            Tags = new List<Subscription>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                Tags.add(new Subscription(parser));
                            }
                        } else if (text == 'Attachments') {
                            Attachments = new List<Subscription>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                Attachments.add(new Subscription(parser));
                            }
                        } else if (text == 'Package') {
                        //  Packages = new Object(parser);
                        } else if (text == 'AcceptedDate') {
                            //AcceptedDate = new Object(parser);
                        } else if (text == 'Blocked') {
                            Blocked = parser.getBooleanValue();
                        } else if (text == 'BlockedReason') {
                            BlockedReason = parser.getText();
                        } else if (text == 'Blocker') {
                            Blocker = new RevisionHistory(parser);
                        } else if (text == 'Children') {
                            Children = new List<Errors>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                Children.add(new Errors(parser));
                            }
                        } else if (text == 'DefectStatus') {
                            DefectStatus = parser.getText();
                        } else if (text == 'Defects') {
                            Defects = new List<Errors>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                Defects.add(new Errors(parser));
                            }
                        } else if (text == 'DirectChildrenCount') {
                            DirectChildrenCount = parser.getIntegerValue();
                        } else if (text == 'HasParent') {
                            HasParent = parser.getBooleanValue();
                        } else if (text == 'InProgressDate') {
                            //InProgressDate = new Object(parser);
                        } else if (text == 'Iteration') {
                            Iteration = new Subscription(parser);
                        } else if (text == 'Parent') {
                            Parent = new Subscription(parser);
                        } else if (text == 'PlanEstimate') {
                            PlanEstimate = parser.getDoubleValue();
                        } else if (text == 'Predecessors') {
                            Predecessors = new List<Errors>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                Predecessors.add(new Errors(parser));
                            }
                        } else if (text == 'Rank') {
                            Rank = parser.getDoubleValue();
                        } else if (text == 'Recycled') {
                            Recycled = parser.getBooleanValue();
                        } else if (text == 'Release') {
                            Release = new Subscription(parser);
                        } else if (text == 'ScheduleState') {
                            ScheduleState = parser.getText();
                        } else if (text == 'Successors') {
                            Successors = new List<Errors>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                Successors.add(new Errors(parser));
                            }
                        } else if (text == 'TaskActualTotal') {
                            TaskActualTotal = parser.getDoubleValue();
                        } else if (text == 'TaskEstimateTotal') {
                            TaskEstimateTotal = parser.getDoubleValue();
                        } else if (text == 'TaskRemainingTotal') {
                            TaskRemainingTotal = parser.getDoubleValue();
                        } else if (text == 'TaskStatus') {
                            TaskStatus = parser.getText();
                        } else if (text == 'Tasks') {
                            Tasks = new List<Errors>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                Tasks.add(new Errors(parser));
                            }
                        } else if (text == 'TestCaseStatus') {
                            TestCaseStatus = parser.getText();
                        } else if (text == 'TestCases') {
                            TestCases = new List<Errors>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                TestCases.add(new Errors(parser));
                            }
                        } else if (text == 'AcceptanceCriteria') {
                            AcceptanceCriteria = parser.getText();
                        } else if (text == 'Area') {
                            Area = parser.getText();
                        } else if (text == 'Capability') {
                            Capability = parser.getText();
                        } else if (text == 'CapabilityRank') {
                            CapabilityRank = parser.getText();
                        } else if (text == 'FunctionalityEvaluation') {
                            FunctionalityEvaluation = parser.getText();
                        } else if (text == 'Integration') {
                            Integration = parser.getText();
                        } else if (text == 'NotUsed') {
                        //  NotUsed = new Object(parser);
                        } else if (text == 'NotUsedCapability') {
                            NotUsedCapability = parser.getText();
                        } else if (text == 'NotUsedCapabilityRank') {
                            NotUsedCapabilityRank = parser.getText();
                        } else if (text == 'NotUsedOldID') {
                            NotUsedOldID = parser.getText();
                        } else if (text == 'NotUsedSource') {
                            NotUsedSource = parser.getText();
                        } else if (text == 'NotUsedSubCapability') {
                            NotUsedSubCapability = parser.getText();
                        } else if (text == 'OldID') {
                            OldID = parser.getText();
                        } else if (text == 'PortfolioItem') {
                            //PortfolioItem = new Object(parser);
                        } else if (text == 'Ranking') {
                            Ranking = parser.getText();
                        } else if (text == 'Requester') {
                            Requester = parser.getText();
                        } else if (text == 'Source') {
                            Source = parser.getText();
                        } else if (text == 'SubCapability') {
                            SubCapability = parser.getText();
                        } else if (text == 'UserGroup') {
                            UserGroup = parser.getText();
                        } else if (text == '_type') {
                            type = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Results consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Errors {

        public Errors(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        {
                            System.debug(LoggingLevel.WARN, 'Errors consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    
    public static LXFO_RallyUserStoryJSONStubClass parse(String json) {
        return new LXFO_RallyUserStoryJSONStubClass(System.JSON.createParser(json));
    }
    
    // This test method should give 100% coverage
    static testMethod void testParse() {
        String json = '{\"QueryResult\": {\"_rallyAPIMajor\": \"1\", \"_rallyAPIMinor\": \"41\", \"Errors\": [], \"Warnings\": [], \"TotalResultCount\": 1, \"StartIndex\": 1, \"PageSize\": 20, \"Results\": [{\"_rallyAPIMajor\": \"1\", \"_rallyAPIMinor\": \"41\", \"_ref\": \"https://rally1.rallydev.com/slm/webservice/1.41/hierarchicalrequirement/11114245576.js\", \"_objectVersion\": \"3\", \"_refObjectName\": \"Test Data 1\", \"CreationDate\": \"2013-03-25T17:45:01.722Z\", \"_CreatedAt\": \"3 minutes ago\", \"ObjectID\": 11114245576, \"Subscription\": {\"_rallyAPIMajor\": \"1\", \"_rallyAPIMinor\": \"41\", \"_ref\": \"https://rally1.rallydev.com/slm/webservice/1.41/subscription/2020685828.js\", \"_refObjectName\": \"Lexmark International - KY\", \"_type\": \"Subscription\"}, \"Workspace\": {\"_rallyAPIMajor\": \"1\", \"_rallyAPIMinor\": \"41\", \"_ref\": \"https://rally1.rallydev.com/slm/webservice/1.41/workspace/11015213780.js\", \"_refObjectName\": \"Lexmark Business Systems\", \"_type\": \"Workspace\"}, \"Changesets\": [], \"Description\": \"Sample Data\", \"Discussion\": [], \"FormattedID\": \"US1740\", \"LastUpdateDate\": \"2013-03-25T17:48:02.508Z\", \"Name\": \"Test Data 1\", \"Notes\": \"Note\", \"Owner\": {\"_rallyAPIMajor\": \"1\", \"_rallyAPIMinor\": \"41\", \"_ref\": \"https://rally1.rallydev.com/slm/webservice/1.41/user/10860329195.js\", \"_refObjectName\": \"Ranjit Gohel\", \"_type\": \"User\"}, \"Project\": {\"_rallyAPIMajor\": \"1\", \"_rallyAPIMinor\": \"41\", \"_ref\": \"https://rally1.rallydev.com/slm/webservice/1.41/project/11037592453.js\", \"_refObjectName\": \"Blue Team\", \"_type\": \"Project\"}, \"Ready\": false, \"RevisionHistory\": {\"_rallyAPIMajor\": \"1\", \"_rallyAPIMinor\": \"41\", \"_ref\": \"https://rally1.rallydev.com/slm/webservice/1.41/revisionhistory/11114245577.js\", \"_type\": \"RevisionHistory\"}, \"Tags\": [{\"_rallyAPIMajor\": \"1\", \"_rallyAPIMinor\": \"41\", \"_ref\": \"https://rally1.rallydev.com/slm/webservice/1.41/tag/11065671907.js\", \"_refObjectName\": \"Integration\", \"_type\": \"Tag\"}], \"Attachments\": [{\"_rallyAPIMajor\": \"1\", \"_rallyAPIMinor\": \"41\", \"_ref\": \"https://rally1.rallydev.com/slm/webservice/1.41/attachment/11114242864.js\", \"_refObjectName\": \".project\", \"_type\": \"Attachment\"}], \"Package\": null, \"AcceptedDate\": null, \"Blocked\": true, \"BlockedReason\": \"Sample Blocked\", \"Blocker\": {\"_rallyAPIMajor\": \"1\", \"_rallyAPIMinor\": \"41\", \"_ref\": \"https://rally1.rallydev.com/slm/webservice/1.41/blocker/11114245599.js\", \"_type\": \"Blocker\"}, \"Children\": [], \"DefectStatus\": \"NONE\", \"Defects\": [], \"DirectChildrenCount\": 0, \"HasParent\": true, \"InProgressDate\": null, \"Iteration\": {\"_rallyAPIMajor\": \"1\", \"_rallyAPIMinor\": \"41\", \"_ref\": \"https://rally1.rallydev.com/slm/webservice/1.41/iteration/11083248702.js\", \"_refObjectName\": \"Sprint 5\", \"_type\": \"Iteration\"}, \"Parent\": {\"_rallyAPIMajor\": \"1\", \"_rallyAPIMinor\": \"41\", \"_ref\": \"https://rally1.rallydev.com/slm/webservice/1.41/hierarchicalrequirement/11074625086.js\", \"_refObjectName\": \"As a sales user I need to be able to request that a contact be \\\"opted\\\" out of marketing communications to eliminate channel conflict when a partner owns the account and we are not allowed by contract to contact them or market to them.\", \"_type\": \"HierarchicalRequirement\"}, \"PlanEstimate\": 2.0, \"Predecessors\": [], \"Rank\": 1.000, \"Recycled\": false, \"Release\": {\"_rallyAPIMajor\": \"1\", \"_rallyAPIMinor\": \"41\", \"_ref\": \"https://rally1.rallydev.com/slm/webservice/1.41/release/11082907482.js\", \"_refObjectName\": \"Release 1A\", \"_type\": \"Release\"}, \"ScheduleState\": \"Defined\", \"Successors\": [], \"TaskActualTotal\": 0.0, \"TaskEstimateTotal\": 0.0, \"TaskRemainingTotal\": 0.0, \"TaskStatus\": \"NONE\", \"Tasks\": [], \"TestCaseStatus\": \"NONE\", \"TestCases\": [], \"AcceptanceCriteria\": \"Sample Acceptance Criteria\", \"Area\": \"Marketing\", \"Capability\": \"Machine\", \"CapabilityRank\": \"1\", \"FunctionalityEvaluation\": \"Out of the Box SFDC\", \"Integration\": \"Yes\", \"NotUsed\": null, \"NotUsedCapability\": \"\", \"NotUsedCapabilityRank\": \"\", \"NotUsedOldID\": \"\", \"NotUsedSource\": \"\", \"NotUsedSubCapability\": \"\", \"OldID\": \"12345\", \"PortfolioItem\": null, \"Ranking\": \"1\", \"Requester\": \"SFDC\", \"Source\": \"Data\", \"SubCapability\": \"Data Mining\", \"UserGroup\": \"Both\", \"_type\": \"HierarchicalRequirement\"}]}}';
        LXFO_RallyUserStoryJSONStubClass r = parse(json);
        System.assert(r != null);

        json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
        QueryResult objQueryResult = new QueryResult(System.JSON.createParser(json));
        System.assert(objQueryResult != null);
        System.assert(objQueryResult.rallyAPIMajor == null);
        System.assert(objQueryResult.rallyAPIMinor == null);
        System.assert(objQueryResult.Errors == null);
        System.assert(objQueryResult.Warnings == null);
        System.assert(objQueryResult.TotalResultCount == null);
        System.assert(objQueryResult.StartIndex == null);
        System.assert(objQueryResult.PageSize == null);
        System.assert(objQueryResult.Results == null);

        json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
        Subscription objSubscription = new Subscription(System.JSON.createParser(json));
        System.assert(objSubscription != null);
        System.assert(objSubscription.rallyAPIMajor == null);
        System.assert(objSubscription.rallyAPIMinor == null);
        System.assert(objSubscription.ref == null);
        System.assert(objSubscription.refObjectName == null);
        System.assert(objSubscription.type == null);

        json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
        LXFO_RallyUserStoryJSONStubClass objRoot = new LXFO_RallyUserStoryJSONStubClass(System.JSON.createParser(json));
        System.assert(objRoot != null);
        System.assert(objRoot.QueryResult == null);

        json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
        RevisionHistory objRevisionHistory = new RevisionHistory(System.JSON.createParser(json));
        System.assert(objRevisionHistory != null);
        System.assert(objRevisionHistory.rallyAPIMajor == null);
        System.assert(objRevisionHistory.rallyAPIMinor == null);
        System.assert(objRevisionHistory.ref == null);
        System.assert(objRevisionHistory.type == null);

        json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
        Results objResults = new Results(System.JSON.createParser(json));
        System.assert(objResults != null);
        System.assert(objResults.rallyAPIMajor == null);
        System.assert(objResults.rallyAPIMinor == null);
        System.assert(objResults.ref == null);
        System.assert(objResults.objectVersion == null);
        System.assert(objResults.refObjectName == null);
        System.assert(objResults.CreationDate == null);
        System.assert(objResults.CreatedAt == null);
        System.assert(objResults.ObjectID == null);
        System.assert(objResults.Subscription == null);
        System.assert(objResults.Workspace == null);
        System.assert(objResults.Changesets == null);
        System.assert(objResults.Description == null);
        System.assert(objResults.Discussion == null);
        System.assert(objResults.FormattedID == null);
        System.assert(objResults.LastUpdateDate == null);
        System.assert(objResults.Name == null);
        System.assert(objResults.Notes == null);
        System.assert(objResults.Owner == null);
        System.assert(objResults.Project == null);
        System.assert(objResults.Ready == null);
        System.assert(objResults.RevisionHistory == null);
        System.assert(objResults.Tags == null);
        System.assert(objResults.Attachments == null);
        System.assert(objResults.Packages == null);
        System.assert(objResults.AcceptedDate == null);
        System.assert(objResults.Blocked == null);
        System.assert(objResults.BlockedReason == null);
        System.assert(objResults.Blocker == null);
        System.assert(objResults.Children == null);
        System.assert(objResults.DefectStatus == null);
        System.assert(objResults.Defects == null);
        System.assert(objResults.DirectChildrenCount == null);
        System.assert(objResults.HasParent == null);
        System.assert(objResults.InProgressDate == null);
        System.assert(objResults.Iteration == null);
        System.assert(objResults.Parent == null);
        System.assert(objResults.PlanEstimate == null);
        System.assert(objResults.Predecessors == null);
        System.assert(objResults.Rank == null);
        System.assert(objResults.Recycled == null);
        System.assert(objResults.Release == null);
        System.assert(objResults.ScheduleState == null);
        System.assert(objResults.Successors == null);
        System.assert(objResults.TaskActualTotal == null);
        System.assert(objResults.TaskEstimateTotal == null);
        System.assert(objResults.TaskRemainingTotal == null);
        System.assert(objResults.TaskStatus == null);
        System.assert(objResults.Tasks == null);
        System.assert(objResults.TestCaseStatus == null);
        System.assert(objResults.TestCases == null);
        System.assert(objResults.AcceptanceCriteria == null);
        System.assert(objResults.Area == null);
        System.assert(objResults.Capability == null);
        System.assert(objResults.CapabilityRank == null);
        System.assert(objResults.FunctionalityEvaluation == null);
        System.assert(objResults.Integration == null);
        System.assert(objResults.NotUsed == null);
        System.assert(objResults.NotUsedCapability == null);
        System.assert(objResults.NotUsedCapabilityRank == null);
        System.assert(objResults.NotUsedOldID == null);
        System.assert(objResults.NotUsedSource == null);
        System.assert(objResults.NotUsedSubCapability == null);
        System.assert(objResults.OldID == null);
        System.assert(objResults.PortfolioItem == null);
        System.assert(objResults.Ranking == null);
        System.assert(objResults.Requester == null);
        System.assert(objResults.Source == null);
        System.assert(objResults.SubCapability == null);
        System.assert(objResults.UserGroup == null);
        System.assert(objResults.type == null);

        json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
        Errors objErrors = new Errors(System.JSON.createParser(json));
        System.assert(objErrors != null);
    }
}